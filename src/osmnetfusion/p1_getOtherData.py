"""
Script for importing data from non-osm sources
- generate_elevation_file: get elevation data from Open Elevation API

Inputs:
- configFile.py: configuration file with all values
    - version: version of the project
    - city_info: dictionary with city information
    - p1_result_filepath: filepath for geopackage file with the osm network
    - elev_filepath: filepath for elevation data
Outputs:
- elevation data (saved to elev_filepath)
"""
# %%

#######################################
import pandas as pd
import geopandas as gpd
import requests
import re
import os
import os.path
import time

# FUNCTIONS #############################################################################

def get_elevation(location):
    """
    Extracts elevation von Open Elavation API for all nodes
    Because of limitation, data is requested in packages of 2000 nodes
    Args:
        @location
    Returns:
        elevation in the provided location
    """
    url = f'https://api.open-elevation.com/api/v1/lookup?'
    if location:
        r = requests.post(url, json={'locations': location})
        print(r)
        return r.json()['results']
    return []

def generate_elevation_file(input_file, output_file):
    """
    Extracts elevation data from Open Elevation API
    Args:
        @input_file, default:"./output_data/Munich/osmnx/bike_network_osmnx_TEST.gpkg" generated by  p1_getOSMNetwork.py
        @output_file, default:"./output_data/Munich/add_data/elevations.json"
    """
    if not os.path.isfile(input_file):
        raise ValueError('Input file {} doesn''t exist. Use p1_getOSMNetwork.py to generate it.'.format(input_file))
    # os.path.isfile(fname) # checks if file exists
    # raise ValueError('A very specific bad thing happened.')
    # gdf_edges_bike = gpd.read_file(input_file, layer='edges')
    gdf_nodes_bike = gpd.read_file(input_file, layer='nodes')
    if gdf_nodes_bike is None or len(gdf_nodes_bike) == 0:
        raise ValueError('Input file {} is empty. Use p1_getOSMNetwork.py to generate it.'.format(input_file))
    j = []
    a = []
    idx = []
    for count, node in enumerate(gdf_nodes_bike.itertuples(), 1):
        # if the querying is interrupted, restart it where it left off
        # e.g. if count=82000, continue with a counter greater than that
        # if count>=82000:
        j.append({'latitude': node.y, 'longitude': node.x})
        idx.append(node.Index)
        if not count % 2000:
            a.extend([{'idx': idx[c], 'elevation': tmp['elevation']} for c, tmp in enumerate(get_elevation(j))])
            j = []
            idx = []
            time.sleep(1)
    a.extend([{'idx': idx[c], 'elevation': tmp['elevation']} for c, tmp in enumerate(get_elevation(j))])
    if len(a) == 0:
        raise ValueError('Missing elevation data')
    # Write elevation in json-File
    output_directory = os.path.dirname(output_file)
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    with open(output_file, 'w') as fp:
        fp.write(str(a))
    print("{} rows of elevation data written to file {}".format(len(a), output_file))


def main(configFile, elevation=True):
    version = configFile.version
    city = configFile.city_info['city']
    p1_result_fp = configFile.p1_result_filepath
    elev_fp = configFile.elev_filepath

    if elevation:
        generate_elevation_file(input_file=p1_result_fp, output_file=elev_fp)
    
if __name__ == "__main__":
    main()


############################################
# Notes
############################################

# TODO: add cycle path width generation from .shp (in a different location currently)


